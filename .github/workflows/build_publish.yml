name: Build & Publish package

on:
  workflow_call:
    inputs:
      packageName:
        required: true
        type: string

jobs:
  build:
    name: Build
    runs-on: ubuntu-latest
    strategy:
      matrix:
        node-version: [16.x]
    steps:
      - name: Checkout
        uses: actions/checkout@v3
      - name: Cache node modules
        id: cache-npm
        uses: actions/cache@v3
        env:
          cache-name: cache-node-modules
        with:
          path: ~/.npm
          key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-node-
      - name: Node ${{ matrix.node-version }}
        uses: actions/setup-node@v3
        with:
          node-version: ${{ matrix.node-version }}
      - name: Install dependencies
        if: ${{ steps.cache-npm.outputs.cache-hit == 'False' }}
        run: |
          npm i
      #- name: Run unit tests
      #  run: |
      #    npm run test:unit:${{ inputs.packageName }}:no-watch
      - name: Build lib
        continue-on-error: true
        run: |
          npm run build:${{ inputs.packageName }}
      #- name: Copy CHANGELOG
      #  run: |
      #    cp projects/${{ inputs.packageName }}/CHANGELOG.md dist/${{ inputs.packageName }}/CHANGELOG.md
      #- name: Copy LICENSE
      #  run: |
      #    cp projects/${{ inputs.packageName }}/LICENSE dist/${{ inputs.packageName }}/LICENSE
      #- name: Upload artifact
      #  uses: actions/upload-artifact@v3
      #  with:
      #    name: ${{ inputs.packageName }}_artifact
      #    path: dist/${{ inputs.packageName }}
  pre_publish_validation:
    name: Pre-Publish Validation
    runs-on: ubuntu-latest
    needs: build
    outputs:
      version_increased: ${{ steps.check_package_version.outputs.version_increased }}
    strategy:
      matrix:
        node-version: [16.x]
    steps:
      - name: Node ${{ matrix.node-version }}
        uses: actions/setup-node@v3
        with:
          node-version: ${{ matrix.node-version }}
          registry-url: 'https://registry.npmjs.com'
      - name: Download artifact
        uses: actions/download-artifact@v3
        with:
          name: ${{ inputs.packageName }}_artifact
      - name: Check for package version update
        id: check_package_version
        run: |
          localPackageVersion=$( jq -r '.version' package.json )
          echo "Local package version: $localPackageVersion"
          npmPackageVersion=$( npm show @ngx-toolset/${{ inputs.packageName }} version )
          echo "Latest package version on NPM: $npmPackageVersion"
          if $(dpkg --compare-versions $localPackageVersion gt $npmPackageVersion);
          then
            echo '::set-output name=version_increased::True'
            echo 'Version updated'
          else
            echo '::set-output name=version_increased::False'
            echo 'Version did not update'
          fi
  publish:
    name: Publish
    runs-on: ubuntu-latest
    needs: pre_publish_validation
    if: ${{ needs.pre_publish_validation.outputs.version_increased == 'True' }}
    environment: NPM
    permissions:
      contents: write
    strategy:
      matrix:
        node-version: [16.x]
    steps:
      - name: Node ${{ matrix.node-version }}
        uses: actions/setup-node@v3
        with:
          node-version: ${{ matrix.node-version }}
          registry-url: 'https://registry.npmjs.com'
      - name: Download artifact
        uses: actions/download-artifact@v3
        with:
          name: ${{ inputs.packageName }}_artifact
      - name: Prepare GitHub release
        run: |
          packageVersion=$( jq -r '.version' package.json )
          echo "packageVersion=$packageVersion" >> $GITHUB_ENV
          zipName="${{ inputs.packageName }}-v${packageVersion}.zip"
          echo "zipName=$zipName" >> $GITHUB_ENV
          changelog=$(<CHANGELOG.md)
          echo "changelog<<EOF" >> $GITHUB_ENV
          echo "$changelog" >> $GITHUB_ENV
          echo "EOF" >> $GITHUB_ENV
          rm CHANGELOG.md
      - name: Publish package on NPM
        run: |
          npm publish --access public
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}
      - name: Create GitHub release artifact
        run: |
          wget --quiet --method GET -O npmPackageData.json "http://registry.npmjs.com/@ngx-toolset/${{ inputs.package_name }}/${{ env.packageVersion }}"
          tarballUrl=$( jq -r '.dist.tarball' npmPackageData.json )
          wget --quiet --method GET -O npmPackage.tgz "$tarballUrl"
          mkdir unpackedPackage
          tar -zxvf ./npmPackage.tgz -C ./unpackedPackage
          cd ./unpackedPackage/package
          zip -r "../../${{ env.zipName }}" *
      - name: Create GitHub release
        uses: ncipollo/release-action@v1
        with:
          artifacts: ${{ env.zipName }}
          body: ${{ env.changelog }}
          name: ${{ env.packageVersion }}
          tag: "v${{ env.packageVersion }}"
          token: ${{ secrets.GITHUB_TOKEN }}
