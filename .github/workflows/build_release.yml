name: Build & Release package

on:
  workflow_call:
    inputs:
      PACKAGE_NAME:
        required: true
        type: string

jobs:
  build:
    name: Build
    runs-on: ubuntu-latest
    strategy:
      matrix:
        node-version: [18.x]
    steps:
      - name: Checkout
        uses: actions/checkout@v3
      - name: Node ${{ matrix.node-version }}
        uses: actions/setup-node@v3
        with:
          node-version: ${{ matrix.node-version }}
      - name: Get package version
        working-directory: ./projects/${{ inputs.PACKAGE_NAME }}
        run: |
          packageVersion=$( jq -r '.version' package.json )
          echo "packageVersion=$packageVersion" >> $GITHUB_ENV
          echo "$packageVersion"
      - name: Validate changelog entry
        uses: mindsers/changelog-reader-action@master #v2
        with:
          validation_level: error
          version: ${{ env.packageVersion }}
          path: ./projects/${{ inputs.PACKAGE_NAME }}/CHANGELOG.md
      - name: Install dependencies
        run: |
          npm ci --ignore-scripts
      - name: Check code style
        run: |
          npm run lint:${{ inputs.PACKAGE_NAME }}
      - name: Run unit tests
        run: |
          npm run test:unit:${{ inputs.PACKAGE_NAME }}:no-watch
      - name: Build lib
        run: |
          npx -c 'ng b @ngx-toolset/${{ inputs.PACKAGE_NAME }}'
          # Somehow calling build script via npm run does not work as of now.
          # npm run build:${{ inputs.PACKAGE_NAME }}
      - name: Copy CHANGELOG
        run: |
          cp projects/${{ inputs.PACKAGE_NAME }}/CHANGELOG.md dist/${{ inputs.PACKAGE_NAME }}/CHANGELOG.md
      - name: Copy LICENSE
        run: |
          cp LICENSE dist/${{ inputs.PACKAGE_NAME }}/LICENSE
      - name: Upload artifact
        uses: actions/upload-artifact@v3
        with:
          name: ${{ inputs.PACKAGE_NAME }}_artifact
          path: dist/${{ inputs.PACKAGE_NAME }}
  pre_release_validation:
    name: Pre-release validation
    runs-on: ubuntu-latest
    needs: build
    outputs:
      version_increased: ${{ steps.verify_package_version_change.outputs.version_increased }}
    strategy:
      matrix:
        node-version: [18.x]
    steps:
      - name: Node ${{ matrix.node-version }}
        uses: actions/setup-node@v3
        with:
          node-version: ${{ matrix.node-version }}
      - name: Download artifact
        uses: actions/download-artifact@v3
        with:
          name: ${{ inputs.PACKAGE_NAME }}_artifact
      - name: Install pysemver
        run: |
          pip3 install semver
      - name: Get latest package version from NPM
        run: |
          npmSearchResult=$( npm search @ngx-toolset/${{ inputs.PACKAGE_NAME }} )
          if [[ "$npmSearchResult" == 'No matches found for "@ngx-toolset/${{ inputs.PACKAGE_NAME }}"' ]];
          then
            latestNpmPackageVersion="0.0.0"
          else
            latestNpmPackageVersion=$( npm show @ngx-toolset/${{ inputs.PACKAGE_NAME }} version )
          fi
          echo "latestNpmPackageVersion=$latestNpmPackageVersion" >> $GITHUB_ENV
          echo "Latest NPM version: $latestNpmPackageVersion"
      - name: Get local package version
        run: |
          localPackageVersion=$( jq -r '.version' package.json )
          echo "localPackageVersion=$localPackageVersion" >> $GITHUB_ENV
          echo "Local version: $localPackageVersion"
      - name: Verify package version change
        id: verify_package_version_change
        run: |
          semverCompareResult=$( pysemver compare ${{ env.latestNpmPackageVersion }} ${{ env.localPackageVersion }} )
          if [[ $semverCompareResult == -1 ]];
          then
            echo '::set-output name=version_increased::True'
            echo 'Version changed'
          else
            echo '::set-output name=version_increased::False'
            echo 'Version did not change'
          fi
  npm-package:
    name: NPM package
    runs-on: ubuntu-latest
    needs: pre_release_validation
    if: ${{ needs.pre_release_validation.outputs.version_increased == 'True' }}
    environment: NPM
    strategy:
      matrix:
        node-version: [18.x]
    steps:
      - name: Node ${{ matrix.node-version }}
        uses: actions/setup-node@v3
        with:
          node-version: ${{ matrix.node-version }}
      - name: Download artifact
        uses: actions/download-artifact@v3
        with:
          name: ${{ inputs.PACKAGE_NAME }}_artifact
      - name: Publish package on NPM
        run: |
          npm config set //registry.npmjs.org/:_authToken ${NODE_AUTH_TOKEN}
          npm publish --access public --ignore-scripts
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}
  github-release:
    name: GitHub release
    runs-on: ubuntu-latest
    needs: npm-package
    if: ${{ needs.pre_release_validation.outputs.version_increased == 'True' }}
    permissions:
      contents: write
    strategy:
      matrix:
        node-version: [18.x]
    steps:
      - name: Node ${{ matrix.node-version }}
        uses: actions/setup-node@v3
        with:
          node-version: ${{ matrix.node-version }}
      - name: Download artifact
        uses: actions/download-artifact@v3
        with:
          name: ${{ inputs.PACKAGE_NAME }}_artifact
      - name: Get package version
        run: |
          packageVersion=$( jq -r '.version' package.json )
          echo "packageVersion=$packageVersion" >> $GITHUB_ENV
      - name: Get zip archive name
        run: |
          zipName="${{ inputs.PACKAGE_NAME }}-v${{ env.packageVersion }}.zip"
          echo "zipName=$zipName" >> $GITHUB_ENV
      - name: Create GitHub release artifact
        run: |
          wget --quiet --method GET -O npmPackageData.json "https://registry.npmjs.org/@ngx-toolset/${{ inputs.PACKAGE_NAME }}/${{ env.packageVersion }}"
          tarballUrl=$( jq -r '.dist.tarball' npmPackageData.json )
          wget --quiet --method GET -O npmPackage.tgz "$tarballUrl"
          mkdir unpackedPackage
          tar -zxvf ./npmPackage.tgz -C ./unpackedPackage
          cd ./unpackedPackage/package
          zip -r "../../${{ env.zipName }}" *
      - name: Get changelog entry
        id: changelog_reader
        uses: mindsers/changelog-reader-action@master #v2
        with:
          version: ${{ env.packageVersion }}
          path: ./CHANGELOG.md
      - name: Create GitHub release
        uses: ncipollo/release-action@v1
        with:
          artifacts: ${{ env.zipName }}
          body: ${{ steps.changelog_reader.outputs.changes }}
          prerelease: ${{ steps.changelog_reader.outputs.status == 'prereleased' }}
          name: "@ngx-toolset/${{ inputs.PACKAGE_NAME }} | ${{ env.packageVersion }}"
          tag: "@ngx-toolset/${{ inputs.PACKAGE_NAME }}@${{ env.packageVersion }}"
          token: ${{ secrets.GITHUB_TOKEN }}
