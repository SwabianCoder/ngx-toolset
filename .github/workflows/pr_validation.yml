name: PR validation

on:
  workflow_call:
    inputs:
      PACKAGE_NAME:
        required: true
        type: string

jobs:
  validate:
    name: Validate
    runs-on: ubuntu-latest
    strategy:
      matrix:
        node-version: [20.9.x]
    steps:
      - name: Checkout PR branch
        uses: actions/checkout@v3
      - name: Node ${{ matrix.node-version }}
        uses: actions/setup-node@v3
        with:
          node-version: ${{ matrix.node-version }}
      - name: Check commit authors
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          PULL_REQUEST_NUMBER: ${{ github.event.pull_request.number }}
          USER_LOGIN_NAME: ${{ github.event.pull_request.user.login }}
        run: |
          dependabotName="dependabot[bot]"
          if [ "$USER_LOGIN_NAME" = "$dependabotName" ];
          then
            echo "$dependabotName was detected as PR creator"
            commits=$( gh pr view $PULL_REQUEST_NUMBER --json commits --jq '.commits' )
            authors=$( jq -r  '[.[] | .authors[] | .login] | unique' <<< $commits )
            commitCount=$( jq '. | length' <<< "$commits" )
            authorCount=$( jq '. | length' <<< "$authors" )
            echo "Commit count: $commitCount"
            echo "Author count: $authorCount"
            if [ $commitCount -gt 1 ] || [ $authorCount -gt 1 ];
            then
              echo "There are too many commits and/or authors for a valid PR branch by $dependabotName"
              exit 1
            else
              author=$( jq -r '.[0]' <<< $authors )
              echo "Author: $author"
              if [ $author != "$dependabotName" ];
              then
                echo "Author does not have the expected value"
                exit 1
              else
                echo "Author is valid"
                echo "skipVersionValidation=True" >> $GITHUB_ENV
              fi
            fi
          else
            echo "$dependabotName was not detected as PR creator"
            echo "skipVersionValidation=False" >> $GITHUB_ENV
          fi
      - name: Install pysemver
        run: |
          pip3 install semver
      - name: Get latest package version from NPM
        if: ${{ env.skipVersionValidation == 'False' }}
        run: |
          npmSearchResult=$( npm search @ngx-toolset/${{ inputs.PACKAGE_NAME }} )
          if [[ "$npmSearchResult" == 'No matches found for "@ngx-toolset/${{ inputs.PACKAGE_NAME }}"' ]];
          then
            latestNpmPackageVersion="0.0.0"
          else
            latestNpmPackageVersion=$( npm show @ngx-toolset/${{ inputs.PACKAGE_NAME }} version )
          fi
          echo "latestNpmPackageVersion=$latestNpmPackageVersion" >> $GITHUB_ENV
          echo "Current version: $latestNpmPackageVersion"
      - name: Get PR package version
        if: ${{ env.skipVersionValidation == 'False' }}
        working-directory: ./projects/${{ inputs.PACKAGE_NAME }}
        run: |
          prPackageVersion=$( jq -r '.version' package.json )
          echo "prPackageVersion=$prPackageVersion" >> $GITHUB_ENV
          echo "PR version: $prPackageVersion"
      - name: Verify package version change
        if: ${{ env.skipVersionValidation == 'False' }}
        run: |
          semverCompareResult=$( pysemver compare ${{ env.latestNpmPackageVersion }} ${{ env.prPackageVersion }} )
          if [[ $semverCompareResult == -1 ]];
          then
            echo 'Version changed'
          else
            echo 'Version did not change'
            exit 1
          fi
      - name: Validate changelog entry
        if: ${{ env.skipVersionValidation == 'False' }}
        uses: mindsers/changelog-reader-action@v2
        with:
          validation_level: error
          version: ${{ env.prPackageVersion }}
          path: ./projects/${{ inputs.PACKAGE_NAME }}/CHANGELOG.md
      - name: Install dependencies
        run: |
          npm ci --ignore-scripts
      - name: Check code style
        run: |
          npm run lint:${{ inputs.PACKAGE_NAME }}
      - name: Run unit tests
        run: |
          npm run test:unit:${{ inputs.PACKAGE_NAME }}:no-watch
      - name: Build lib
        run: |
          npm run build:${{ inputs.PACKAGE_NAME }}
